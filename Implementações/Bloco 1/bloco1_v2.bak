/********************************
* L  = Distância entre os eixos *
* RP = Raio do pneu             *
*********************************/
#define L 0.105
#define RP 0.0287
//Parâmetro da formação
#define R 0.15
#define T 5
//Converte rotações por milissegundos para rads
#define TORADS 17.45

//Ganhos
#define kp 10
#define ki 1
#define kd 1

/*********************************
*            Sistema              *
**********************************/
//Velocidade angular desejada em torno do alvo
float wd = 2 * (PI/T);
float vd = wd * R;

/**********************************
*              Robo               *
**********************************/
//Posição real do robô
//float xr = 0;
//float yr = 0;
//teta real
//float tr = 0;
//Velocidade real do robô
//float wrr = 0;
//Posição desejada do robô
//float xd = 0;
//float yd = 0;
//float td = 0;

/*******************************
*         Roda Direita         *
********************************/
float wr,wdr;
//Contagem de rotações da roda no tempo t-1
long prev_deg_a = 0;
float ewr_D = 0;

/*******************************
*         Roda Esquerda        *
********************************/
//velocidade angular real e desejada do robo
float wl,wdl;
//Contagem de rotações da roda no tempo t-1
long prev_deg_c = 0;
float ewl_D = 0;

/**********************************
*           Auxiliares            *
***********************************/
//Auxiliar para gravar no arquivo txt
string write;
short bytesWritten;
byte fileHandle;
//Tempo de Amostragem
int t_amostral = 200;
//Número de amostras
int amostras = 200;

//recebera o tempo
long prev_tick = 0;
long dt = 0;

//Acumulador de erro
float acum_err = 0;
float acum_erl = 0;


sub ws(){
   //Calculando as velocidades angulares da amostra w(k) de cada roda milissegundos
   dt = CurrentTick() - prev_tick;
   //Graus por milissegundos
   long deg_a = MotorRotationCount(OUT_A) - prev_deg_a;
   long deg_c = MotorRotationCount(OUT_C) - prev_deg_c;
   wr = deg_a * TORADS / dt;
   wl = deg_c * TORADS / dt;
   prev_deg_a = MotorRotationCount(OUT_A);
   prev_deg_c = MotorRotationCount(OUT_C);
   prev_tick = CurrentTick();
}

sub control_motor(float wc){

    //Velocidade desejada de cada roda
    float wdr = (2*vd + wc*L)/(2*RP);
    float wdl = (2*vd - wc*L)/(2*RP);
    //Obtendo as velocidades angular de cada roda
    ws();
    //Erro de cada roda
    float ewr = wdr - wr;
    float ewl = wdl - wl;
    //Acumulador de erro
    acum_err = acum_err + (dt/1000)*ewr;
    acum_erl = acum_erl + (dt/1000)*ewl;
    //Ações de controle
    //ganho proporcional  - ganho integral - ganho derivativo
    float cr = kp*ewr + ki*acum_err + kd*((ewr - ewr_D)/(dt /1000));
    float cl = kp*ewl + acum_erl + ki*0.2*ewl + kd*((ewl - ewl_D)/(dt/1000));
    ewr_D = ewr;
    ewl_D = ewl;

    //Colocando os motores  dentro dos padrões aplicáveis (-100,100)
    float abs_cr = 0;
    float abs_cl = 0;
    if(cr < 0){
          abs_cr = -cr;
    }else{
          abs_cr = cr;
    }
    if(cl < 0){
          abs_cl = -cl;
    }else{
          abs_cl = cl;
    }
    if(abs_cr > 100 || abs_cl > 100){
          if(abs_cr > abs_cl){
                float p = cr/cl;
                if(cr < 0){
                     cr = -100;
                }else{
                      cr = 100;
                }
                cl = cr/p;
          }else{
               float p = cl/cr;
                if(cl < 0){
                     cl = -100;
                }else{
                      cl = 100;
                }
                cr = cl/p;
          }
    }

    OnFwd(OUT_A,cr);
    OnFwd(OUT_C,cl);
    //Salvando erros em arquivo
    write = StrCat(NumToStr(ewr),"|",NumToStr(ewl));
    WriteLnString(fileHandle,write, bytesWritten);
    
}

task main(){

    DeleteFile("Err_B1_PIDp_15.txt");
    CreateFile("Err_B1_PID_15p.txt",2*2048, fileHandle);
    prev_tick = CurrentTick();

    for(int k = 0; k < amostras; k++){

        control_motor(wd);
        Wait(t_amostral);
    }
    CloseFile(fileHandle);
}
