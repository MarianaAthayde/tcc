//Testes Malha Interna
#define L 0.112
#define RP 0.0216
#define motorR OUT_A
#define motorL OUT_C

//Auxiliar para gravar no arquivo txt
string write;
short bytesWritten;
byte fileHandle;

//Converter graus em radianos 1º = 0,0174533 rad
float convrad = 0.0174533;

int t_amostral = 25;
int amostras = 1000;

long tempo_k = 0.0;
float dt = 0.0;

float countR_k = 0;
float countL_k = 0;
float countR_kplus = 0;
float countL_kplus = 0;

float wr = 0.0;
float wl = 0.0;
float wdr = 0.0;
float wdl = 0.0;
float ewr = 0.0;
float ewl = 0.0;

//Variáveis do Controlador
float acum_err = 0.0;
float acum_erl = 0.0;
float prev_ewr = 0.0;
float prev_ewl = 0.0;
//Ganhos
float kp = 10;
float ki = 15;
float kd = 0.2;
float incremento = 3;

float cr = 0;
float cl = 0;


float P[] = {-0.00091, 0.0223, -0.1537, 6.1864, -0.0546};

sub getWs(){
    countR_kplus = MotorRotationCount(motorR);
    countL_kplus = MotorRotationCount(motorL);
    
    //Velocidade = delta_Rotação*constConvGrau2Rad/delta_tempo em segundos
    wr = (countR_kplus - countR_k)*convrad/dt;  //wr em rad/s
    wl = (countL_kplus - countL_k)*convrad/dt;  //wl em rad/s
    countR_k = countR_kplus;
    countL_k = countL_kplus;

}

sub malha1(float vLinear,float vAng){

    //Definindo as velocidades desejadas de Cada Roda
    wdr = (2*vLinear + vAng*L)/(2*RP);
    wdl = (2*vLinear - vAng*L)/(2*RP);
    
    //Obtendo as velocidades reais de cada roda
    getWs();
    
    //Obtendo os erros de velocidade
    ewr = wdr - wr;
    ewl = wdl - wl;
    
     //Ações de controle
     //Controle Proporcional
    /*cr = kp*ewr;
    cl = kp*ewl;*/
    //Controle Proporcional Integrador
    /*cr = kp*ewr + acum_err + ki*dt*ewr;
    cl = kp*ewl + acum_erl + ki*dt*ewl;*/
    //Controlador Proporcional Integrador Derivativo
    /*cr = kp*ewr + acum_err + ki*dt*ewr + kd*(ewr - prev_ewr)/dt;
    cl = kp*ewl + acum_erl + ki*dt*ewl + kd*(ewl - prev_ewl)/dt;
    // Controlador Intedral e Derivativo
    //Salvando erro atual
    prev_ewr = ewr;
    prev_ewl = ewl;

    //Atualizando o acumulador de erro
    acum_err = acum_err + ki*dt*ewr;
    acum_erl = acum_erl + ki*dt*ewl; */

    //Incremental
    /*if(ewr > 0){
           cr = cr + incremento;
    }else{
          if(ewr < 0 ){
                 cr = cr - incremento;
          }
    }
    if(ewl > 0){
           cl = cl + incremento;
    }else{
          if(ewr < 0 ){
                 cl = cl - incremento;
          }
    } */

    /*if(cr > 100){
          cr = 100;
    }
    if(cr < -100){
          cr = -100;
    }
    if(cl > 100){
          cl = 100;
    }
    if(cl < -100){
          cl = -100;
    }
    
    OnFwd(OUT_A,cr);
    OnFwd(OUT_C,cl);  */


           //Variáveis de Ajuste Polinômial
          cr = P[0]*pow(wdr,4) + P[1]*pow(wdr,3) + P[2]*pow(wdr,2) + P[3]*wdr + P[4];  // Ajuste polinomial
          cl = P[0]*pow(wdl,4) + P[1]*pow(wdl,3) + P[2]*pow(wdl,2) + P[3]*wdl + P[4];  // Pwr_{r,l} X w_{r,l}
           // Comandos para os motores (Polinomial)
          OnFwdReg(motorR, cr, OUT_REGMODE_SPEED);
          OnFwdReg(motorL, cl, OUT_REGMODE_SPEED);


    //Salvando erros em arquivo
    write = StrCat(NumToStr(ewr),"|",NumToStr(ewl),"|",NumToStr(dt));
    WriteLnString(fileHandle,write, bytesWritten);
}

task main(){

    DeleteFile("Tst_Malha1.txt");
    CreateFile("Tst_Malha1.txt",10*2048, fileHandle);

    //write = StrCat("kp: ",NumToStr(kp),"|ki: ",NumToStr(ki),"|kd: ",NumToStr(kd));
    //WriteLnString(fileHandle,write, bytesWritten);


    tempo_k = CurrentTick();
    for(int t = 0; t < amostras; t++){
        //Calculando dt em segundos
        long dt_aux = CurrentTick() - tempo_k;
        tempo_k = tempo_k + dt_aux;
        dt = dt_aux/1000.0;
        
        
        if(t < amostras/10){
        malha1(0,0);
        //PlayTone(400,500);
        }else{
        if(t < amostras - (amostras/2)){
        malha1(0.189,0);
        //PlayTone(300,500);
        }else{
        malha1(0.189,0.62831);
        //PlayTone(600,500);
        }
        }
        
        Wait(t_amostral);
    }

    CloseFile(fileHandle);

}
