/********************************
*  Parâmetros do robô (metros)  *
*********************************
* L  = Distância entre os eixos *
* RP = Raio do pneu             *
*********************************/
#define L 0.105
#define RP 0.0287
//Parâmetro da formação
//R = raio de distância do alvo: metros;
#define R 0.2
//Periodo de rotação em torno do alvo: segundos
#define Ti 10
//Converte rotações por milissegundos para rads
#define TORADS 17.45
//Ganhos do controlador PID do motor
#define kp 10
#define ki 1
#define kd 1

//Ganhos de controlador PID de posição
#define kp_pos 0.01
#define ki_pos 0.5
#define kd_pos 1

/*******************************
*            Variáveis         *
********************************/
//Tempo de Amostragem
int t_amostral = 200;

//Número de amostras
int k = 500;

//Parâmetro do controlador de posição
float T = Ti;

//Acumulador de erro das rodas direita e esquerda, respectivamente
float acum_err = 0;
float acum_erl = 0;

//Espaço de tempo
long dt = 0;
long tempo_inicial = 0;
//recebera o tempo t(k-1)
long prev_tick;

//Auxiliar para gravar no arquivo txt
string write;
short bytesWritten;
byte fileHandle;
//Auxiliar para gravar no arquivo txt
byte fileHandle2;

/*******************************
*              Alvo            *
********************************/
float xc = 0;
float yc = 0;

/*******************************
*              Robô            *
********************************/
//velocidade linear e angular desejada do robo
float vd = 2 *(PI/Ti)* R;
float wd;

//Argumentos desejados iniciais
float wdi = 0;
float vdi = 0;
float wdri = 0;
float wdli = 0;

//Posição e sentido desejados
//float xd = 0;
//float yd = 0;
float tetad = 0;

//Posição e sentido real
float xr = 0.20;
float yr = 0;
float tetar = PI;

//Erros de posição
//float errx = 0;
//float erry = 0;
float errt = 0;
//float acum_errx = 0;
//float acum_erry = 0;
float acum_errt = 0;


/*******************************
*         Roda Direita         *
********************************/
//velocidade angular real e desejada do robo
float wr,wdr;
//Contagem de rotações da roda no tempo t-1
long prev_deg_a = 0;
//Potência de atuação do motor direito
int pwr;
float ewr_D = 0;
float dr = 0;

/*******************************
*         Roda Esquerda        *
********************************/
//velocidade angular real e desejada do robo
float wl,wdl;
//Contagem de rotações da roda no tempo t-1
long prev_deg_c = 0;
//Potência de atuação do motor direito
int pwl;
float ewl_D = 0;
float dl = 0;

int t =0;

sub ws(){
   //Calculando as velocidades angulares da amostra w(k) de cada roda

   //Graus por milissegundos
   long deg_a = MotorRotationCount(OUT_A) - prev_deg_a;
   long deg_c = MotorRotationCount(OUT_C) - prev_deg_c;
   wr = deg_a * TORADS / dt;
   dr = dr + deg_a*2*PI*RP/360;
   wl = deg_c * TORADS / dt;
   dl = dl + deg_c*2*PI*RP/360;
   prev_deg_a = MotorRotationCount(OUT_A);
   prev_deg_c = MotorRotationCount(OUT_C);
}

sub wd_rodas(){
    wdr = (2*vd + wd*L)/(2*RP);
    wdl = (2*vd - wd*L)/(2*RP);
}

sub control_motor(){
    //Ação de Controle
    //Obtendo a velocidade angular atual desejada
    wd_rodas();
    //Obtendo as velocidades angular de cada roda
    ws();
    //Erro de cada roda
    float ewr = wdr - wr;
    float ewl = wdl - wl;
    //Ações de controle
    //ganho proporcional  - ganho integral - ganho derivativo
    //float cr = kp*ewr + acum_err + ki*0.2*ewr + kd*(ewr - ewr_D)/dt;
    //float cl = kp*ewl + acum_erl + ki*0.2*ewl + kd*(ewl - ewl_D)/dt;
    ewr_D = ewr;
    ewl_D = ewl;
    //ganho proporcional  - ganho integral
    float cr = kp*ewr + acum_err + ki*0.2*ewr;
    float cl = kp*ewl + acum_erl + ki*0.2*ewl;

    acum_err = acum_err + ki*0.2*ewr;
    acum_erl = acum_erl + ki*0.2*ewl;
    
     //Colocando os motores  dentro dos padrões aplicáveis (-100,100)
    float abs_cr = 0;
    float abs_cl = 0;
    if(cr < 0){
          abs_cr = -cr;
    }else{
          abs_cr = cr;
    }
    if(cl < 0){
          abs_cl = -cl;
    }else{
          abs_cl = cl;
    }
    if(abs_cr > 100 || abs_cl > 100){
          if(abs_cr > abs_cl){
                float p = cr/cl;
                if(cr < 0){
                     cr = -100;
                }else{
                      cr = 100;
                }
                cl = cr/p;
          }else{
               float p = cl/cr;
                if(cl < 0){
                     cl = -100;
                }else{
                      cl = 100;
                }
                cr = cl/p;
          }
    }

    OnFwd(OUT_A,cr);
    OnFwd(OUT_C,cl);
    //Salvando erros em arquivo
    string write = StrCat(NumToStr(ewr),"|",NumToStr(ewl));
    short bytesWritten;
    WriteLnString(fileHandle,write, bytesWritten);
}

sub control_pos(){
//Ação de Controle
//Obtendo posição e sentido real
xr = xr + (dr+dl)* cos(tetar)/2;
yr = yr + (dr+dl)* sin(tetar)/2;
tetar = tetar + (dr - dl)/L;

//Obtendo posição e teta desejado
//long tempo_corrido = CurrentTick() - tempo_inicial;
//float aux = wdi*tempo_corrido;
float aux = wdi*t*0.2;
float xd = xc + R* cos(aux);
float yd = yc + R* sin(aux);
float errx = xd - xr;
float erry = yd - yr;
//tetad = Atan2(erry/errx);
tetad = atan2(erry,errx);

float errt_past = errt;

errt = tetad - tetar;
errt = atan2(sin(errt),cos(errt));

//Controle P
//float h = kp_pos*errt;

wd = kp_pos*errt;
//Controle PI
//wd = kp_pos*errt + acum_errt + ki_pos*0.2*errt;
//Controle PID
//T = kp_pos*errt + acum_errt + ki_pos*0.2*errt + kd_pos * (errt - errt_past)/dt;

//acum_errx = acum_errx + ki_pos*0.2*errx;
//acum_erry = acum_erry + ki_pos*0.2*erry;
acum_errt = acum_errt + ki_pos*0.2*errt;

//Salvando erros em arquivo
    short bytesWritten2;
    string write2 = StrCat(NumToStr(errx),"|",NumToStr(erry),"|",NumToStr(errt));
    WriteLnString(fileHandle2,write2, bytesWritten2);
}



task main(){
    //Inicializando o sistema
    wd_rodas();
    wdi = wd;
    vdi = vd;
    wdri = wdr;
    wdli = wdl;
    DeleteFile("Err_Bloco1.txt");
    CreateFile("Err_Bloco1.txt",3*2048, fileHandle);
    DeleteFile("Err_Bloco2.txt");
    CreateFile("Err_Bloco2.txt",3*2048, fileHandle2);
    tempo_inicial = CurrentTick();
    xc = 0.0;
    yc = 0.0;

    for(t = 0; t < k; t++){
        prev_tick = CurrentTick();
        control_pos();
        control_motor();
        Wait(t_amostral);
        dt = CurrentTick() - prev_tick;
    }
    CloseFile(fileHandle);
    CloseFile(fileHandle2);
}
